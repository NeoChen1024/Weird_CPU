Simple first CPU
================

ALU Functions:
	0 -> Passthrough
	1 -> Add
	2 -> NAND
	3 -> Inversion

Registers:
	A (8bit Accumulator)
	C (Carry)
	P (Program Counter)

	EA (Effective Address, Internal)

Instruction Format:
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|             O   P             |         A   D   D   R         |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

Instruction: (and opcodes)
	R:	Read from Memory	0x00
	A:	Add			0x04
	N:	NAND			0x08
	I:	Inversion (NOT)		0x0C
	W:	Write to Memory		0x01
	JP:	Unconditional Jump	0x30
	JC:	Jump if C isn't set	0x20
	H:	Halt			0x40

	...etc, there're many more combinations that have potiential use.

Notes:
	1.	C (Carry) will always be set if current data + A overflows
	2.	JC doesn't unset C

Control State:
	1:	Load Opcode				(ADDR_SEL, RDI, P_UPD)
	2:	Load Effective Address			(ADDR_SEL, RD_EA)
	3:	Load Indirect, Try Jump			(RD_EA (Read Indirect Address), P_UPD, P_JMP)
	4:	Memory Read / Write, ALU operation	(A_W / MWR, IOMEM)

Op-code format:
  7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+
|IOM| H | J | C | ALU_F | I |R/W|
+---+---+---+---+---+---+---+---+

	IOM:	Use I/O memory
	H:	Halt
	J:	Type of instruction (Normal or Jump)
	C:	Conditional Jump (If 1, unconditional)
	ALU_F:	ALU Fuctions
	I:	Indirect Access
	R/W:	Read / Write to Memory
